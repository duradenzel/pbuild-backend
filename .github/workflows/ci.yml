# name: .NET Build and Test with Coverlet Coverage

# on:
#   push:
#     branches: [ dev ]
#   pull_request:
#     branches: [ master ]

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0

#     - name: Setup .NET 8 SDK
#       uses: actions/setup-dotnet@v3
#       with:
#         dotnet-version: '8.0'

#     - name: Install Coverlet
#       run: dotnet tool install --global coverlet.console


#     - name: Restore dependencies
#       run: dotnet restore pbuild.sln

#     - name: Begin SonarCloud analysis
#       env:
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#       run: |
#         dotnet sonarscanner begin \
#           /k:"duradenzel_pbuild-backend" \
#           /o:"duradenzel" \
#           /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
#           /d:sonar.host.url="https://sonarcloud.io" \
#           /d:sonar.cs.opencover.reportsPaths="coverage.xml" \
#           /d:sonar.verbose=true

#     - name: Build solution
#       run: dotnet build pbuild.sln --configuration Release --no-restore

#     - name: Run tests with Coverlet and collect coverage (OpenCover format)
#       run: |
#         coverlet ./pbuild-tests/bin/Release/net8.0/pbuild-tests.dll \
#           --target "dotnet" \
#           --targetargs "test ./pbuild-tests/pbuild-tests.csproj --no-build --configuration Release" \
#           --format opencover \
#           --output coverage.xml

#     - name: End SonarCloud analysis
#       env:
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#       run: |
#         dotnet sonarscanner end \
#           /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

#     - name: Upload Coverage Report
#       uses: actions/upload-artifact@v4
#       with:
#         name: coverage
#         path: coverage.xml


name: .NET Build and Test with Coverlet Coverage

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ master ]

jobs:
  build-test-coverage:
    name: Build, Test, and Codacy Coverage
    runs-on: ubuntu-latest
 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
 
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
 
      - name: Restore Dependencies
        run: dotnet restore
 
      - name: Build Solution
        run: dotnet build --configuration Release --no-restore
 
      - name: Run Tests with Coverage
        run: |
          dotnet test ./pbuild-tests/pbuild-tests.csproj --configuration Release \
            --collect:"XPlat Code Coverage"
 
      - name: Locate Coverage File
        id: locate_coverage
        run: |
          echo "COVERAGE_FILE=$(find . -name 'coverage.cobertura.xml' | head -n 1)" >> $GITHUB_ENV
 
      - name: Show Coverage File Path
        run: |
          echo "Found coverage file at: ${{ env.COVERAGE_FILE }}"
 
      - name: Download Codacy Coverage Reporter
        run: |
          curl -Ls https://github.com/codacy/codacy-coverage-reporter/releases/latest/download/codacy-coverage-reporter-linux \
            -o codacy-coverage-reporter && chmod +x codacy-coverage-reporter
 
      - name: Upload Coverage to Codacy
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: ./codacy-coverage-reporter report -l CSharp -r "${{ env.COVERAGE_FILE }}"